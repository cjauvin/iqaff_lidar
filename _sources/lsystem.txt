Création de données pseudo-LIDAR à partir d'un L-système
========================================================

J'ai écrit un programme qui prend une grammaire L-système (et quelques
autres paramètres) en entrée, et produit une représentation
géométrique d'arbre en sortie. Toutefois, pour ce que soit utile dans
notre contexte, j'ai dû ajouter une composante supplémentaire : des
points sont samplés à la surface des cylindres correspondant aux
segments de branche, et pour mieux imiter l'effet du LIDAR, ils sont
légèrement déviés de la surface (suivant une loi exponentielle).

Ma première expérience est avec une grammaire très simple::

   A -> F[+A][-A][^A][vA]

où ``A`` est une variable, ``F`` correspond à la création d'une branche,
`+`, `-`, etc.  des opérateurs de changement de direction, et ``[]``
sont des opérateurs syntaxiques (servant à la création de
sous-branches). Avec trois itérations et des angles 45 degrés, voici
ce que ça donne :

.. image:: images/lsystem1.png

Si on ajoute ensuite l'étape de sampling (i.e. effet pseudo-LIDAR) :

.. image:: images/lsystem+lidar.png

La densité des points est ajustable, et dans cet exemple il y a
environ 5500 points, soit à peu près la taille du jeu de données de la
gaule.

L'idée est donc de rouler l'algorithme de reconstruction sur cet arbre
artificiel, pour voir ce que ça donne. On peut premièrement vérifier
que la recherche des plus proches voisins (``N``) fonctionne
raisonnablement (ici environ 20 voisins par point, dont seulement 20%
sont affichés, pour prévenir la fonte de mon laptop) :

.. image:: images/lsystem_N.png

..ce qui semble être le cas. Voyons ensuite la recherche des plus
courts chemins (``G``).. (ici encore seulement 20% des chemins sont
affichés) :

.. image:: images/lsystem_G.png

On constate un premier problème : il y a une distorsion dans le graphe
géodésique introduite par le choix (arbitraire) du point le plus près
de la base du tronc (à gauche). On peut améliorer la situation en
introduisant un point supplémentaire, situé "sous" l'arbre, au centre
:

.. image:: images/lsystem_G+lower_base_pt.png

Si on fait la reconstruction à partir de ce graphe géodésique corrigé,
voici ce que ça donne, en mode "squelette" (i.e. le rayon des branches
n'est pas pris en compte) :

.. image:: images/lsystem_K_too_many_centroids.png

La raison du trop grand nombre de branches est apparente quand on
visualise les centroides sous-jacents :

.. image:: images/lsystem_S_too_many_centroids.png

Il y a évidemment trop de centroides, ce qui entraîne le grand nombre
de branches. Pour réduire leur nombre, il faut augmenter le nombre de
voisins (paramètres ``--dS``, ou ``--kS``) qui composent les sous-graphes des
"level sets" (``S``), ce qui entraînera une plus grande connectivité, donc
moins de sous-graphes, donc moins de centroides :

.. image:: images/lsystem_S_right_nb_of_centroids.png

ce qui entraîne un squelette plus raisonnable :

.. image:: images/lsystem_K.png

et une reconstruction finale.. raisonnable aussi, mais nécessitant
encore quelques améliorations :

.. image:: images/lsystem_T.png




